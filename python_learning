___________________________________________________________________________________________________________________________________________________
# interesting things about string in python

>>> name = 'panyixian'
>>> name[1]
'a'
>>> name[1:3]
'an'
>>> name[:3]
'pan'

___________________________________________________________________________________________________________________________________________________
# cube root of a real nunmber

num = float(input('pls enter a real number: '))
epsilon = 0.0001
low = 0
high = abs(num)
guess = (low + high) / 2

if abs(num) > 1:
    while abs(abs(num) - guess**3) > epsilon:
        if abs(num) > guess**3:
            low = guess
            guess = (low + high) / 2
        else:
            high = guess
            guess = (low + high) / 2
            
if abs(num) > 0 and abs(num) < 1:
    low = abs(num)
    high = 1
    guess = (low + high) / 2
    while abs(abs(num) - guess**3) > epsilon:
        if abs(num) > guess**3:
            low = guess
            guess = (low + high) / 2
        else:
            high = guess
            guess = (low + high) / 2

if num < 0:
    guess = - guess

print('the cube root of ' + str(num) + ' is ' + str(guess))

___________________________________________________________________________________________________________________________________________________
# Factorial-iteration & recursion

def fact_iter(n):
    fact = 1
    for i in range (1, n+1):
        fact = fact * i
    return fact

def fact_recur(n):
    if n == 1:
        return 1
    else:
        return n * fact_recur(n-1)

___________________________________________________________________________________________________________________________________________________
# Hanoi tower, recursion

def printMove(fr, to):
    print('move from ' + str(fr) + ' to ' + str(to))

def makeMove(n, fr, to, spare):
    if n == 1:
        printMove(fr, to)
    else:
        makeMove(n-1, fr, spare, to)
        makeMove(1, fr, to, spare)
        makeMove(n-1, spare, to, fr)

n = int(input('pls enter the number of disks: '))
print('it takes following steps to move all the disks from Tower T1 to Tower T2: ')
makeMove(n, 'T1', 'T2', 'T3')

___________________________________________________________________________________________________________________________________________________
# Palindrome test, recursion

def isPalindrome(s):

    def toChar(s):
        s = s.lower()
        ans = ''
        for c in s:
            if c in 'abcdefghijklmnopqrstuvwxyz':
                ans = ans + c
        return ans

    def isPal(s):
        if len(s) <= 1:
            return True
        else:
            return s[0] == s[-1] and isPal(s[1:-1])

    return isPal(toChar(s))

s = input('pls enter a sentence for palindrome check: ')
if isPalindrome(s):
    print('this is a palindrome')
else:
    print('this is not a palindrome')

___________________________________________________________________________________________________________________________________________________
#deal with files, read & write

nameHandle = open('filename.txt', 'r')
for line in nameHandle:
    print(line)
nameHandle.close()

nameHandle = open('filename.txt', 'w')
for i in range(2):
    name = input('pls enter a name: ')
    nameHandle.write(name + '\')
nameHandle.close()


___________________________________________________________________________________________________________________________________________________
# Tuple (), ordered sequence of elements, mixed element types(cool....), immutable, cannot change element values, iterable

tu = (1, 'ten', 3, 'seven', 5, 6)

def get_data(a_Tuple):
    nums = ()
    words = ()
    for t in aTuple:
        nums = nums + (t[0],)
        if t[1] not in words:
            words = words + (t[1],)
    min_nums = min(nums)
    max_nums = max(nums)
    unique_words = len(words)
    return (min_nums, max_nums, unique_words)

(small, large, words) = get_data(((1, 'mine'),
                                  (3, 'yours'),
                                  (5, 'ours'),
                                  (7, 'mine')))


___________________________________________________________________________________________________________________________________________________
# List [], ordered sequence of elements, usually the same type, mutable, elements can be changed, iterable

def remove_dups(L1, L2):
    L1_copy = L1[:]
    for e in L1_copy:
        if e in L2:
            L1.remove(e)

a_list = [2, 3, 5, 7, 1]
b_list = [1, 4, 6, 7, 9]

print('before remove duplicates, a_list: ', a_list)
print('before remove duplicates, b_list: ', b_list)
remove_dups(a_list, b_list)
print('after remove duplicates, a_list: ', a_list)


___________________________________________________________________________________________________________________________________________________
# Dictionary {}, use 'keys' to locate 'values', both can be mixed types, 'keys' immutable

# more efficient way of calculating fibonacci by using dictionary - store the calculated fib(n) in dictionary, call f(n) without duplicate calc

def fib(n):
    global total_call_num
    total_call_num +=1
    if n == 1:
        return 1
    elif n == 2:
        return 2
    else:
        return (fib(n-1) + fib(n-2))

def fib_dict(n, d):
    global total_call_num
    total_call_num +=1
    if n in d:
        return d[n]
    else:
        ans = fib_dict(n-1, d) + fib_dict(n-2, d)
        d[n] = ans
        return ans

d = {1:1, 2:2}

test = int(input('pls enter the number for fibonacci: '))

total_call_num = 0

print('using fib_dict:', fib_dict(test, d))
print('total number of calling:', total_call_num)

total_call_num = 0

print('using fib:', fib(test))
print('total number of calling:', total_call_num)

___________________________________________________________________________________________________________________________________________________
#define a class of fraction number
#getter and setter: avoid direct manipulation of internal representations of an object

class fraction(object):
    def __init__(self, numer, denom):
        self.numer = numer
        self.denom = denom
    def __str__(self):
        return str(self.numer) + '/' + str(self.denom)
    def getNumer(self):
        return self.numer
    def getDenom(self):
        return self.denom
    def __add__(self, other):
        numerNew = other.getDenom() * self.getNumer() + other.getNumer() * self.getDenom()
        denomNew = other.getDenom() * self.getDenom()
        return fraction(numerNew, denomNew)
    def __sub__(self, other):
        numerNew = other.getDenom() * self.getNumer() - other.getNumer() * self.getDenom()
        denomNew = other.getDenom() * self.getDenom()
        return fraction(numerNew, denomNew)
    def convert(self):
        return self.getNumer() / self.getDenom()

one_half = fraction(1,2)
two_thirds = fraction(2,3)

new = one_half + two_thirds
print(new)

new = one_half - two_thirds
print(new)
print(new.convert())

___________________________________________________________________________________________________________________________________________________
#define a class of integer set

class intSet(object):
    def __init__(self):
        self.vals = []
    def insert(self, e):
        if not e in self.vals:
            self.vals.append(e)
    def is_member(self, e):
        return e in self.vals
    def remove(self, e):
        try:
            self.vals.remove(e)
        except:
            raise ValueError(str(e) + ' not found')
    def __str__(self):
        self.vals.sort()
        result = ''
        for e in self.vals:
            result = result + str(e) + ', '
        return '{' + result[:-2] + '}'

"""s = intSet()
s.insert(7)
s.insert(9)
s.is_member(4)
s.remove(6)
print(s)"""


___________________________________________________________________________________________________________________________________________________



___________________________________________________________________________________________________________________________________________________
