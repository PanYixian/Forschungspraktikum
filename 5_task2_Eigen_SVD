//task2: same geometry, but different order and global rotation/translation different


//using Eigen!!!

//step1: read in 1st and 2nd file, calculate center of mass (centroid_0 and centroid_1)
//step2: translation of centroid_1 and centroid_0 to origin
//step3: calculate the relative atom-atom distances, reorder 2nd file
//step4: apply Kabsch algorithm, rotate to superimpose
//step5: move the rotated centroid to centroid_0

#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>
#include <Eigen/SVD>
using namespace std;
using namespace Eigen;

//function declarations

void printCoord(vector<vector<double>> &coord, int num, string atom_type[]);

void printDis(vector<vector<double>> &rel_dis, int num);

vector<vector<double>> transpose(vector<vector<double>> &A, int atom_num);

double RMSD(vector<vector<double>> &A, vector<vector<double>> &B, int atom_num);  //root mean square deviation, how well the two point sets overlap


int main()
{
    
    //step1: read in 1st(with underscore _0) and 2nd(with underscore _1) file
    
    ifstream fin;
    ofstream fout;
    int atom_num_0, atom_num_1;                                      //the number of atoms in the molecule
    int i, j, k;
    cin.precision(8);
    cout.precision(8);
    fin.precision(8);
    fout.precision(8);
    cout << fixed;
    fout << fixed;
    
    
    fin.open("aspirin_1.xyz");                                         //open the 1st xyz file and test whether it work2
    if(fin.fail())
        cout << "File failed to open." << endl;

    fin >> atom_num_0;                                                //read in the number of atoms from the first line
    
//    string energy[4];                                               //deal with the second line concerning energy
//    for (int i = 0; i < 4; i++) {
//        fin >> energy[i];
//        cout << energy[i] << " ";
//    }
//    cout << endl;
    
    vector<vector<double>> coord_0(atom_num_0), coord_0_original(atom_num_0);                      //define a 2D vector to store the coordinates
    string atom_type_0[atom_num_0];                                  //the type of atoms
    
    for (i = 0; i < atom_num_0; i++){                                 //define 3 coordinates (x,y,z) for each atom
        coord_0[i].resize(3);
        coord_0_original[i].resize(3);
    }
    
    for(i = 0; i < atom_num_0; i++)
    {
        fin  >> atom_type_0[i];                                      //read in the type of each atom
        for (j = 0; j < 3; j++)
        {
            fin >> coord_0[i][j];                                    //read in the coordinates x,y,z for each atom
            coord_0_original[i][j] = coord_0[i][j];
        }
    }
    fin.close();
    
    
    fin.open("aspirin_3.xyz");                                         //open the 2nd xyz file and test whether it works
    if(fin.fail())
        cout << "File failed to open." << endl;
        
    fin >> atom_num_1;

    vector<vector<double>> coord_1(atom_num_1);
    string atom_type_1[atom_num_1];
        
    for (i = 0; i < atom_num_1; i++)
        coord_1[i].resize(3);

    for(i = 0; i < atom_num_1; i++){
        fin >> atom_type_1[i];
        for (j = 0; j < 3; j++){
            fin >> coord_1[i][j];
        }
    }
    fin.close();

    
    //step2: calculate the centroids and translate them to origin
    
    double center_0[3], center_1[3];

    for (j = 0; j < 3; j++) {                                          //calculate the center of mass assuming all atoms with mass 1
        double sum_0 = 0, sum_1 = 0;
        for (i = 0; i < atom_num_0; i++) {
            sum_0 = sum_0 + coord_0[i][j];
            sum_1 = sum_1 + coord_1[i][j];
        }
        center_0[j] = sum_0 / atom_num_0;
        center_1[j] = sum_1 / atom_num_1;
    }
    
    cout << "centroid of 1st file: " << center_0[0] << " " << center_0[1] << " " << center_0[2] << endl;
    cout << "centroid of 2nd file: " << center_1[0] << " " << center_1[1] << " " << center_1[2] << endl;
    cout << endl;
    
    for (j = 0; j < 3; j++) {                                           //move the two centroids to the origin
        for (i = 0; i < atom_num_0; i++) {
            coord_0[i][j] = coord_0[i][j] - center_0[j];
            coord_1[i][j] = coord_1[i][j] - center_1[j];
        }
    }
    
    
    
    //step3: calculate the relative atom-atom distances, reorder 2nd file
    //build two n*n matrix for storing the characteristic relative atom-atom distances
    
    vector<vector<double>> rel_dis_0(atom_num_0), rel_dis_1(atom_num_1);
    
    for (i = 0; i < atom_num_1; i++){
        rel_dis_0[i].resize(atom_num_0);
        rel_dis_1[i].resize(atom_num_1);
    }
    
    //calculate and sort the relative distances for each atom from the 1st file
    
    for (i = 0; i < atom_num_0; i++) {
        for (j = 0; j < atom_num_0; j++) {
            rel_dis_0[i][j] = sqrt(pow(coord_0[i][0] - coord_0[j][0], 2) +
                                   pow(coord_0[i][1] - coord_0[j][1], 2) + pow(coord_0[i][2] - coord_0[j][2], 2));
        }
        for (j = 0; j < atom_num_0 - 1; j++) {
            for (k = j + 1; k < atom_num_0; k++) {
                if (rel_dis_0[i][j] > rel_dis_0[i][k]) {
                    swap(rel_dis_0[i][j], rel_dis_0[i][k]);
                }
            }
        }
    }
    
    //calculate and sort the relative distances for each atom from the 2nd file
    
    for (i = 0; i < atom_num_1; i++) {
        for (j = 0; j < atom_num_1; j++) {
            rel_dis_1[i][j] = sqrt(pow(coord_1[i][0] - coord_1[j][0], 2) +
                                   pow(coord_1[i][1] - coord_1[j][1], 2) + pow(coord_1[i][2] - coord_1[j][2], 2));
        }
        for (j = 0; j < atom_num_1 - 1; j++) {
            for (k = j + 1; k < atom_num_1; k++) {
                if (rel_dis_1[i][j] > rel_dis_1[i][k]) {
                    swap(rel_dis_1[i][j], rel_dis_1[i][k]);
                }
            }
        }
    }
    
    
//    //compare the relative distances and switch the atom order in 2nd file
//
//    for (i = 0; i < atom_num_0 - 1; i++) {
//        for (j = i; atom_type_0 - 1; j++) {
//            if (rel_dis_0[i] == rel_dis_1[j]) {
//                swap(coord_1[i], coord_1[j]);            //switch the coordination in 2nd file
//                string temp = atom_type_1[i];
//                atom_type_1[i] = atom_type_1[j];
//                atom_type_1[j] = temp;
//
//                swap(rel_dis_1[i], rel_dis_1[j]);        //switch the relative distance of the molecule from 2nd file
//                break;
//            }
//        }
//    }
    
        //compare the relative distances and switch the atom order in 2nd file
        
        for (i = 0; i < atom_num_0; i++) {
            
            double min_dev = 10000;
            double dev_sum = 0;
            
            for (j = i; j < atom_num_0; j++) {
                dev_sum = 0;
                for (k = 0; k < atom_num_0; k++) {
                    dev_sum = dev_sum + abs(rel_dis_0[i][k] - rel_dis_1[j][k]);
                }
                
    //            cout << i << " " << j << " " << dev_sum << " " << min_dev << endl;
                    
                if (dev_sum < min_dev) {
                    swap(rel_dis_1[i], rel_dis_1[j]);
                    swap(coord_1[i], coord_1[j]);
                    string temp = atom_type_1[i];
                    atom_type_1[i] = atom_type_1[j];
                    atom_type_1[j] = temp;
                        
                    min_dev = dev_sum;
                    
    //                printCoord(coord_1, atom_num_1, atom_type_1);
                }
    //            cout << min_dev << endl;
            }
        }
    
    
    //step4: apply Kabsch algorithm, rotate to superimpose
    //1. compute RMSD(coord_0, coord_1)
    
    double RMSD_1 = RMSD(coord_0, coord_1, atom_num_0);
    cout << "RMSD before rotation: " << RMSD_1 << endl << endl;;

    //2. compute the covariance matrix A = P_trans * Q, P is coord_0(reference), Q is coord_1(to be rotated)

    vector<vector<double>> trans_coord_0 = transpose(coord_0, atom_num_0), CovMatrix(3);
    for (i = 0; i < 3; i++) CovMatrix[i].resize(3);

    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            double sum = 0;
            for (k = 0; k < atom_num_0; k++) {
                sum = sum + trans_coord_0[i][k] * coord_1[k][j];
            }
            CovMatrix[i][j] = sum;
        }
    }
    
//    printDis(CovMatrix, 3);
    
    //3. SVD(Singular Value Decomposition) of A: A = U * S * V^T
    
    MatrixXf m(3,3);
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            m(i,j) = CovMatrix[i][j];
        }
    }
    
//    int n = 1;
//    MatrixXf m(3,3);
//    for (i = 0; i < 3; i++) {
//        for (j = 0; j < 3; j++) {
//            m(i,j) = n;
//            n++;
//        }
//    }
//
//    m(0,0) = 1;
//    m(0,1) = 1;
//    m(0,2) = 0;
//    m(1,0) = 0;
//    m(1,1) = 1;
//    m(1,2) = 1;
//    m(2,0) = 1;
//    m(2,1) = 0;
//    m(2,2) = 1;
    
    
    cout << "Here is the covariance matrix m:" << endl << m << endl;
    JacobiSVD<MatrixXf> svd(m, ComputeFullU | ComputeFullV);
    cout << "Its singular values are:" << endl << svd.singularValues() << endl;
    cout << "Its left singular vectors are the columns of the thin U matrix:" << endl << svd.matrixU() << endl;
    cout << "Its right singular vectors are the columns of the thin V matrix:" << endl << svd.matrixV() << endl << endl;
    MatrixXf U = svd.matrixU(), V = svd.matrixV(), S = svd.singularValues();
    
    vector<vector<double>> RotMatrix(3);
    for (i = 0; i < 3; i++) RotMatrix[i].resize(3);
    
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            RotMatrix[i][j] = 0;
            for (k = 0; k < 3; k++) {
                RotMatrix[i][j] = RotMatrix[i][j] + V(k,i) * U(j,k);
            }
        }
    }

    cout << "rotation matrix:" << endl;
    printDis(RotMatrix, 3);
    cout << endl;
    
    //calculate the determinant of rotation matrix
    double det_Rot_matrix;
    det_Rot_matrix =   RotMatrix[0][0]*(RotMatrix[1][1]*RotMatrix[2][2] - RotMatrix[2][1]*RotMatrix[1][2])
                     - RotMatrix[0][1]*(RotMatrix[1][0]*RotMatrix[2][2] - RotMatrix[2][0]*RotMatrix[1][2])
                     + RotMatrix[0][2]*(RotMatrix[1][0]*RotMatrix[2][1] - RotMatrix[1][1]*RotMatrix[2][0]);
    cout << "the determinant of rotation matrix is: " << det_Rot_matrix << endl << endl;
    if (det_Rot_matrix < 0) {
        RotMatrix[0][2] = -RotMatrix[0][2];
        RotMatrix[1][2] = -RotMatrix[1][2];
        RotMatrix[2][2] = -RotMatrix[2][2];
    }
    
    
    //4. rotate the structure from 2nd file
    
    vector<vector<double>> coord_2(atom_num_1);
    for (i = 0; i < atom_num_1; i++)
        coord_2[i].resize(3);
    
    for (i = 0; i < atom_num_1; i++) {
        coord_2[i][0] = RotMatrix[0][0]*coord_1[i][0] + RotMatrix[0][1]*coord_1[i][1] + RotMatrix[0][2]*coord_1[i][2];
        coord_2[i][1] = RotMatrix[1][0]*coord_1[i][0] + RotMatrix[1][1]*coord_1[i][1] + RotMatrix[1][2]*coord_1[i][2];
        coord_2[i][2] = RotMatrix[2][0]*coord_1[i][0] + RotMatrix[2][1]*coord_1[i][1] + RotMatrix[2][2]*coord_1[i][2];
    }
    
    cout << "1st xyz file moved to origin:" << endl;
    printCoord(coord_0, atom_num_0, atom_type_0);
    cout << endl;
    
    cout << "2nd xyz file moved to origin:" << endl;
    printCoord(coord_1, atom_num_1, atom_type_1);
    cout << endl;
    
    cout << "the rotated 2nd xyz file at origin:" << endl;
    printCoord(coord_2, atom_num_1, atom_type_1);
    cout << endl;
    
    
    
    //5. calculate RMSD again
    
    double RMSD_2 = RMSD(coord_0, coord_2, atom_num_0);
    cout << "RMSD after rotation: " << RMSD_2 << endl << endl;
    
    
//    Vector3f rhs(1, 0, 0);
//    cout << "Now consider this rhs vector:" << endl << rhs << endl;
//    cout << "A least-squares solution of m*x = rhs is:" << endl << svd.solve(rhs) << endl;
    
    //step5: move the rotated centroid to centroid_0
    
    for (j = 0; j < 3; j++) {
        for (i = 0; i < atom_num_0; i++) {
            coord_2[i][j] = coord_2[i][j] + center_0[j];
        }
    }
    
    cout << "move the rotated 2nd xyz file to centroid_0:" << endl;
    printCoord(coord_2, atom_num_1, atom_type_1);
    cout << endl;
    
    cout << "the original 1st xyz file:" << endl;
    printCoord(coord_0_original, atom_num_0, atom_type_0);

//    //print out the reorganized coordinates from 2nd file in a 3rd file
//
//    fout.open("test1_3.xyz");
//    fout << atom_num_1 << endl;
//
////    for (int i = 0; i < 4; i++) {                             //deal with the second line concerning energy
////        fout << energy[i] << " ";
////    }
//    fout << endl;
//    for (i = 0; i < atom_num_1; i++) {
//        fout << atom_type_1[i] << "\t";
//        for (j = 0; j < 3; j++) {
//            fout << coord_1[i][j] << "\t";
//        }
//        fout << endl;
//    }
//    fout.close();

    

    return 0;
}


//function definitions

void printCoord(vector<vector<double>> &coord, int num, string atom_type[]){
    for(int i = 0; i < num; i++)
    {
        cout << atom_type[i] << "\t";
        for (int j = 0; j < 3; j++)
        {
            cout << coord[i][j] << "\t";
        }
        cout << endl;
    }
}

void printDis(vector<vector<double>> &rel_dis, int num){
    for(int i = 0; i < num; i++)
    {
        for (int j = 0; j < num; j++)
        {
            cout << rel_dis[i][j] << "\t";
        }
        cout << endl;
    }
}

vector<vector<double>> transpose(vector<vector<double>> &A, int atom_num) {
    int rows = atom_num;
    if (rows == 0) return {{}};
    int cols = 3;
    vector<vector<double>> r(cols, vector<double>(rows));
    for (int i = 0; i < rows; ++ i) {
        for (int j = 0; j < cols; ++ j) {
            r[j][i] = A[i][j];
        }
    }
    return r;
}

double RMSD(vector<vector<double>> &A, vector<vector<double>> &B, int atom_num){
    int i, j;
    double RMSD = 0;
    
    for (i = 0; i < atom_num; i++) {
        for (j = 0; j < 3; j++) {
            RMSD = RMSD + pow((A[i][j] - B[i][j]), 2);
        }
    }
    RMSD = sqrt(RMSD / atom_num);
    
    return RMSD;
}
