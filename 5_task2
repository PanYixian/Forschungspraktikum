//task2: same geometry, but different order and global rotation/translation different

//step1: read in 1st and 2nd file, calculate center of mass (centroid_0 and centroid_1)
//step2: translation of centroid_1 and centroid_0 to origin
//step3: calculate the relative atom-atom distances, reorder 2nd file
//step4: apply Kabsch algorithm
//step5: print the rotated 2nd file by rewriting the 2nd file

#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>
using namespace std;

//function declarations

void printCoord(vector<vector<double>> coord, int num, string atom_type[]);

void printDis(vector<vector<double>> rel_dis, int num);

vector<vector<double>> transpose(vector<vector<double>>& A, int atom_num);


int main()
{
    
    //step1: read in 1st(with underscore _0) and 2nd(with underscore _1) file
    
    ifstream fin;
    ofstream fout;
    int atom_num_0, atom_num_1;                                      //the number of atoms in the molecule
    int i, j, k;
    cin.precision(8);
    cout.precision(8);
    fin.precision(8);
    fout.precision(8);
    cout << fixed;
    fout << fixed;
    
    
    fin.open("test1_1.xyz");                                         //open the 1st xyz file and test whether it work2
    if(fin.fail())
        cout << "File failed to open." << endl;

    fin >> atom_num_0;                                               //read in the number of atoms from the first line
    
//    string energy[4];                                              //deal with the second line concerning energy
//    for (int i = 0; i < 4; i++) {
//        fin >> energy[i];
//        cout << energy[i] << " ";
//    }
//    cout << endl;
    
    vector<vector<double>> coord_0(atom_num_0);                      //define a 2D vector to store the coordinates
    string atom_type_0[atom_num_0];                                  //the type of atoms
    
    for (i = 0; i < atom_num_0; i++)                                 //define 3 coordinates (x,y,z) for each atom
        coord_0[i].resize(3);

    for(i = 0; i < atom_num_0; i++)
    {
        fin  >> atom_type_0[i];                                      //read in the type of each atom
        for (j = 0; j < 3; j++)
        {
            fin >> coord_0[i][j];                                    //read in the coordinates x,y,z for each atom
        }
    }
    fin.close();
    
    
    fin.open("test1_2.xyz");                                         //open the 2nd xyz file and test whether it work3
    if(fin.fail())
        cout << "File failed to open." << endl;
        
    fin >> atom_num_1;

    vector<vector<double>> coord_1(atom_num_1);
    string atom_type_1[atom_num_1];
        
    for (i = 0; i < atom_num_1; i++)
        coord_1[i].resize(3);

    for(i = 0; i < atom_num_1; i++){
        fin >> atom_type_1[i];
        for (j = 0; j < 3; j++){
            fin >> coord_1[i][j];
        }
    }
    fin.close();

    
    //step2: calculate the centroids and translate them to origin
    
    double center_0[3], center_1[2];

    for (j = 0; j < 3; j++) {                                          //calculate the center of mass assuming all atoms with mass 1
        double sum_0 = 0, sum_1 = 0;
        for (i = 0; i < atom_num_0; i++) {
            sum_0 = sum_0 + coord_0[i][j];
            sum_1 = sum_1 + coord_1[i][j];
        }
        center_0[j] = sum_0 / atom_num_0;
        center_1[j] = sum_1 / atom_num_1;
    }
    
    for (j = 0; j < 3; j++) {                                           //move the two centroids to the origin
        for (i = 0; i < atom_num_0; i++) {
            coord_0[i][j] = coord_0[i][j] - center_0[j];
            coord_1[i][j] = coord_1[i][j] - center_1[j];
        }
    }
    
    
    //step3: calculate the relative atom-atom distances, reorder 2nd file
    //build two n*n matrix for storing the characteristic relative atom-atom distances
    
    vector<vector<double>> rel_dis_0(atom_num_0), rel_dis_1(atom_num_1);
    
    for (i = 0; i < atom_num_1; i++){
        rel_dis_0[i].resize(atom_num_0);
        rel_dis_1[i].resize(atom_num_1);
    }
    
    //calculate and sort the relative distances for each atom from the 1st file
    
    for (i = 0; i < atom_num_0; i++) {
        for (j = 0; j < atom_num_0; j++) {
            rel_dis_0[i][j] = sqrt(pow(coord_0[i][0] - coord_0[j][0], 2) +
                                   pow(coord_0[i][1] - coord_0[j][1], 2) + pow(coord_0[i][2] - coord_0[j][2], 2));
        }
        for (j = 0; j < atom_num_0 - 1; j++) {
            for (k = j + 1; k < atom_num_0; k++) {
                if (rel_dis_0[i][j] > rel_dis_0[i][k]) {
                    swap(rel_dis_0[i][j], rel_dis_0[i][k]);
                }
            }
        }
    }
    
    //calculate and sort the relative distances for each atom from the 2nd file
    
    for (i = 0; i < atom_num_1; i++) {
        for (j = 0; j < atom_num_1; j++) {
            rel_dis_1[i][j] = sqrt(pow(coord_1[i][0] - coord_1[j][0], 2) +
                                   pow(coord_1[i][1] - coord_1[j][1], 2) + pow(coord_1[i][2] - coord_1[j][2], 2));
        }
        for (j = 0; j < atom_num_1 - 1; j++) {
            for (k = j + 1; k < atom_num_1; k++) {
                if (rel_dis_1[i][j] > rel_dis_1[i][k]) {
                    swap(rel_dis_1[i][j], rel_dis_1[i][k]);
                }
            }
        }
    }
    
    
    //compare the relative distances and switch the atom order in 2nd file
    
    for (i = 0; i < atom_num_0 - 1; i++) {
        for (j = i; atom_type_0 - 1; j++) {
            if (rel_dis_0[i] == rel_dis_1[j]) {
                swap(coord_1[i], coord_1[j]);            //switch the coordination in 2nd file
                string temp = atom_type_1[i];
                atom_type_1[i] = atom_type_1[j];
                atom_type_1[j] = temp;
                
                swap(rel_dis_1[i], rel_dis_1[j]);        //switch the relative distance of the molecule from 2nd file
                break;
            }
        }
    }
    
    
    //step4: apply Kabsch algorithm
    //1. compute the covariance matrix A = P_trans * Q, P is coord_0(reference), Q is coord_1(to be rotated)
    
    vector<vector<double>> trans_coord_0 = transpose(coord_0, atom_num_0), CovMatrix(3);
    for (i = 0; i < 3; i++) CovMatrix[i].resize(3);

    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            double sum = 0;
            for (k = 0; k < atom_num_0; k++) {
                sum = sum + trans_coord_0[i][k] * coord_1[k][j];
            }
            CovMatrix[i][j] = sum;
        }
    }
    
//    printDis(CovMatrix, 3);
    
    //2. SVD(Singular Value Decomposition) of A: A = U * S * V^T
    //2-1. calculate Symmetric Factorization Matrix F = A^T * A
    
    vector<vector<double>> FactMatrix(3), trans_CovMatrix = transpose(CovMatrix, 3);
    for (i = 0; i < 3; i++) FactMatrix[i].resize(3);
    
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            double sum = 0;
            for (k = 0; k < 3; k++) {
                sum = sum + trans_CovMatrix[i][k] * CovMatrix[k][j];
            }
            FactMatrix[i][j] = sum;
        }
    }
    
    
    //2-2. calculate the eigenvalues and eigenvectors of F
    
    
    
    
    //2-3. calculate the matrix of singular values S and its inverse S^(-1)
    
    
    
    
    //2-4. calculate the matrix of right singular vectors V and its transpose V^T
    
    
    
    
    //2-5. calculate the matrix of left singular values U by U = A * V^T * S^(-1)
    
    
    
    
    
    

//    //print out the reorganized coordinates from 2nd file in a 3rd file
//
//    fout.open("test1_3.xyz");
//    fout << atom_num_1 << endl;
//
////    for (int i = 0; i < 4; i++) {                             //deal with the second line concerning energy
////        fout << energy[i] << " ";
////    }
//    fout << endl;
//    for (i = 0; i < atom_num_1; i++) {
//        fout << atom_type_1[i] << "\t";
//        for (j = 0; j < 3; j++) {
//            fout << coord_1[i][j] << "\t";
//        }
//        fout << endl;
//    }
//    fout.close();

    

    return 0;
}


//function definitions

void printCoord(vector<vector<double>> coord, int num, string atom_type[]){
    for(int i = 0; i < num; i++)
    {
        cout << atom_type[i] << "\t";
        for (int j = 0; j < 3; j++)
        {
            cout << coord[i][j] << "\t";
        }
        cout << endl;
    }
}

void printDis(vector<vector<double>> rel_dis, int num){
    for(int i = 0; i < num; i++)
    {
        for (int j = 0; j < num; j++)
        {
            cout << rel_dis[i][j] << "\t";
        }
        cout << endl;
    }
}

vector<vector<double>> transpose(vector<vector<double>>& A, int atom_num) {
    int rows = atom_num;
    if (rows == 0) return {{}};
    int cols = 3;
    vector<vector<double>> r(cols, vector<double>(rows));
    for (int i = 0; i < rows; ++ i) {
        for (int j = 0; j < cols; ++ j) {
            r[j][i] = A[i][j];
        }
    }
    return r;
}
