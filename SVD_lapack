//g++ -o test_lapack.x test_lapack.cpp -framework Accelerate
//./test_lapack.x

#include <iostream>
#include <vector>
#include <Accelerate/Accelerate.h>
#include <fstream>

using namespace std;

//extern "C" void dgetrf_(int* dim1, int* dim2, double* a, int* lda, int* ipiv, int* info);
//extern "C" void dgetrs_(char *TRANS, int *N, int *NRHS, double *A, int *LDA, int *IPIV, double *B, int *LDB, int *INFO );
//extern "C" void sgesvd_(char *JOBU, char *JOBVT, int *M, int *N, double *A, int *LDA, double *S, double *U, int *LDU, double *VT, int *LDVT, double *WORK, int *LWORK, int *INFO);

int main()
{
    char JOBU = 'S';
    char JOBVT = 'S';
    int M = 3, N = 3;
    int LDA = M, LDU = M, INFO = 0, LWORK = 100, LDVT = 3;

    vector<double> A, S, U, VT, WORK;

    A.push_back(3);
    A.push_back(1);
    A.push_back(0);
    A.push_back(1);
    A.push_back(2);
    A.push_back(1);
    A.push_back(0);
    A.push_back(2);
    A.push_back(1);
    
    S.push_back(0);
    U.push_back(0);
    VT.push_back(0);
    WORK.push_back(0);

//    dgetrf_(&dim, &dim, &*a.begin(), &LDA, ipiv, &info);
//    dgetrs_(&trans, &dim, &nrhs, & *a.begin(), &LDA, ipiv, & *b.begin(), &LDB, &info);
    dgesvd_(&JOBU, &JOBVT, &M, &N, &*A.begin(), &LDA, &*S.begin(), &*U.begin(), &LDU, &*VT.begin(), &LDVT, &*WORK.begin(), &LWORK, &INFO);

    cout << "U is:" << endl;
    cout << U[0] << " " << U[3] << " " << U[6] << endl;
    cout << U[1] << " " << U[4] << " " << U[7] << endl;
    cout << U[2] << " " << U[5] << " " << U[8] << endl;

    cout << "S is:" << endl;
    cout << S[0] << " " << S[1] << " " << S[2] << endl;

    cout << "V^T is:" << endl;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            cout << VT[M*i + j] << " ";
        }
        cout << endl;
    }

    cout << "Info = " << INFO << endl;

    return(0);
}
