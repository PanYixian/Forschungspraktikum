// task5: superimpose two molecules with different functional groups

// 1st idea: suppose that there are two special atoms which are not C,H,O
//           find out the two special atoms and centroids, apply Kabsch Algorithm to this point set of three

// the code works, but the situation it deals with is too specific concerning the special atoms

#include <iostream>
#include <fstream>
#include <vector>
#include <Eigen/Geometry>
using namespace std;
using namespace Eigen;


int main()
{
    
    // step1: read in the coordinates
    
    ifstream fin;
    ofstream fout;
    int atom_num_0, atom_num_1;
    int i,j,k;
    cin.precision(8);
    cout.precision(8);
    fin.precision(8);
    fout.precision(8);
    cout << fixed;
    fout << fixed;
    
    fin.open("pent_A_center_R_1.xyz");
    if (fin.fail())
        cout << "File failed to open." << endl;
    
    fin >> atom_num_0;
    Matrix3Xd coord_0(3, atom_num_0), ref_coord(3, 3), work_coord(3, 3);
                                    // ref_coord(i, 0) is the 1st special atom
                                    // ref_coord(i, 1) is the 2nd special atom
                                    // ref_coord(i, 2) is the centroid
    string atom_type_0[atom_num_0], ref_coord_type[2];
    int count_special = 0;
    
    
    // the 3rd columns of ref_coord and work_coord are set to be at origin (0,0,0)
    for (k = 0; k < 3; k++) {
        ref_coord(k, 2) = 0;
        work_coord (k, 2) = 0;
        
    }
    
    // coordinate stored in column, 3*d matrix
    
    for (i = 0; i < atom_num_0; i++) {
        fin >> atom_type_0[i];
        
        for (j = 0; j < 3; j++) {
            fin >> coord_0(j, i);
            }
        
        // find out the special atom which is not C,H,O and store it into ref_coord
        if ((atom_type_0[i] != "C") && (atom_type_0[i] != "H") && (atom_type_0[i] != "O")){
            ref_coord_type[count_special] = atom_type_0[i];
            ref_coord(0, count_special) = coord_0(0, i);
            ref_coord(1, count_special) = coord_0(1, i);
            ref_coord(2, count_special) = coord_0(2, i);
            count_special ++;
        }
    }
    fin.close();
    
    fin.open("pent_A_center_R_CH3.xyz");
    if (fin.fail())
        cout << "File failed to open." << endl;
    
    fin >> atom_num_1;
    Matrix3Xd coord_1(3, atom_num_1);
    string atom_type_1[atom_num_1];
    
    for (i = 0; i < atom_num_1; i++) {
        fin >> atom_type_1[i];
        
        for (j = 0; j < 3; j++) {
            fin >> coord_1(j, i);
        }
        
        // find out the special atom by comparing with the one found in reference coord
        if (atom_type_1[i] == ref_coord_type[0]){
            work_coord(0, 0) = coord_1(0, i);
            work_coord(1, 0) = coord_1(1, i);
            work_coord(2, 0) = coord_1(2, i);
        }
        if (atom_type_1[i] == ref_coord_type[1]){
            work_coord(0, 1) = coord_1(0, i);
            work_coord(1, 1) = coord_1(1, i);
            work_coord(2, 1) = coord_1(2, i);
        }
    }
    fin.close();
    
    // print out original coordinates
    
    cout << "the origianl reference coordinate: " << endl << endl;
    
    for (i = 0; i < atom_num_0; i++) {
        cout << atom_type_0[i] << " ";
        for (j = 0; j < 3; j++) {
            cout << coord_0(j, i) << " ";
        }
        cout << endl;
    }
    cout << endl;
    
    cout << "the origianl working coordinate: " << endl << endl;
    
    for (i = 0; i < atom_num_1; i++) {
        cout << atom_type_1[i] << " ";
        for (j = 0; j < 3; j++) {
            cout << coord_1(j, i) << " ";
        }
        cout << endl;
    }
    cout << endl;
    
    // calculate the RMSD of original coordinates
    
    double RMSD_before_trans = 0;
    
    for (int i = 0; i < atom_num_0; i++) {
        for (int j = 0; j < 3; j++) {
            RMSD_before_trans += pow(coord_0(j, i)-coord_1(j, i), 2);
        }
    }
    
    RMSD_before_trans = sqrt(RMSD_before_trans / atom_num_0);
    
    cout << "RMSD before translation: " << RMSD_before_trans << endl << endl;
    
    
    
    // step2: calculate the centroids and translate to origin
    
    Vector3d centroid_0 = Vector3d::Zero(), centroid_1 = Vector3d::Zero();
    
    for (i = 0; i < 3; i++) {
        double sum_0 = 0;
        for (j = 0; j < atom_num_0; j++) {
            sum_0 = sum_0 + coord_0(i, j);
        }
        centroid_0(i) = sum_0 / atom_num_0;
        
    }
    
    for (i = 0; i < 3; i++) {
        double sum_1 = 0;
        for (j = 0; j < atom_num_1; j++) {
            sum_1 = sum_1 + coord_1(i, j);
        }
        centroid_1(i) = sum_1 / atom_num_1;
    }
    
//    cout << "centroid of 1st file: " << endl << centroid_0 << endl;
//    cout << "centroid of 2nd file: " << endl << centroid_1 << endl;
//    cout << endl;
    
    for (i = 0; i < 3; i++) {
        for (j = 0; j < atom_num_0; j++) {
            coord_0(i, j) -= centroid_0(i);
        }
        ref_coord(i, 0) -= centroid_0(i);
        ref_coord(i, 1) -= centroid_0(i);
        work_coord(i, 0) -= centroid_1(i);
        work_coord(i, 1) -= centroid_1(i);
    }
    
    for (i = 0; i < 3; i++) {
        for (j = 0; j < atom_num_1; j++) {
            coord_1(i, j) -= centroid_1(i);
        }
    }
    
    cout << "reference coordinate for constructing CovMatrix: " << endl << ref_coord << endl;
    cout << "working coordinate for constructing CovMatrix: " << endl << work_coord << endl;
    
    
    
    // step4: apply Kabsch Algorithm
    // 4-1: compute RMSD(coord_0, coord_1)
    
    double RMSD_before = 0;
    
    for (int i = 0; i < atom_num_0; i++) {
        for (int j = 0; j < 3; j++) {
            RMSD_before += pow(coord_0(j, i)-coord_1(j, i), 2);
        }
    }
    
    RMSD_before = sqrt(RMSD_before / atom_num_0);
    
    cout << "RMSD after translation and before rotation: " << RMSD_before << endl << endl;
    
    // 4-2: SVD
    MatrixXd CovMatrix = work_coord * ref_coord.transpose();
    JacobiSVD<MatrixXd> SVD(CovMatrix, ComputeThinU | ComputeThinV);
    
    // 4-3: find the rotation matrix
    double d = (SVD.matrixV() * SVD.matrixU().transpose()).determinant();
    if (d > 0)
        d = 1.0;
    else
        d = -1.0;
    Matrix3d I = Matrix3d::Identity(3, 3);
    I(2, 2) = d;
    Matrix3d RotMatrix = SVD.matrixV() * I * SVD.matrixU().transpose();
    cout << "Rotation matrix: " << endl << RotMatrix << endl;
    
//    cout << (RotMatrix * coord_1).transpose() << endl;
    
    // 4-4: rotate the 2nd molecule and calculate the RMSD again
    
    Matrix3Xd coord_2(3, atom_num_1);
    coord_2 = RotMatrix * coord_1;
    
//    cout << coord_0.transpose() << endl << endl;
//    cout << coord_2.transpose() << endl << endl;
    
    
    cout << "the reference coordinate with centroid at origin:" << endl << endl;
    
    for (i = 0; i < atom_num_0; i++) {
        cout << atom_type_0[i] << " ";
        for (j = 0; j < 3; j++) {
            cout << coord_0(j, i) << " ";
        }
        cout << endl;
    }
    cout << endl;
    
    cout << "the working coordinate with centroid at origin after rotation:" << endl << endl;
    
    for (i = 0; i < atom_num_1; i++) {
        cout << atom_type_1[i] << " ";
        for (j = 0; j < 3; j++) {
            cout << coord_2(j, i) << " ";
        }
        cout << endl;
    }
    cout << endl;
    
    double RMSD_after = 0;
    
    for (int i = 0; i < atom_num_0; i++) {
        for (int j = 0; j < 3; j++) {
            RMSD_after += pow(coord_0(j, i)-coord_2(j, i), 2);
        }
    }
    
    RMSD_after = sqrt(RMSD_after / atom_num_0);
    
    cout << "RMSD after rotation: " << RMSD_after << endl << endl;
    

    return 0;
}
