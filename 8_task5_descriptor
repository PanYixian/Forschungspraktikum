// task5: superimpose two molecules with different functional groups

// implement descriptor information from April's code aenet


#include <iostream>
#include <fstream>
#include <vector>
#include <Eigen/Geometry>
using namespace std;
using namespace Eigen;
const int max_atom_num = 100, descriptor_num = 44;


int main()
{
    
    // step1: read in the coordinates
    
    ifstream fin;
    ofstream fout;
    int atom_num_0, atom_num_1;
    int i,j,k;
    cin.precision(8);
    cout.precision(8);
    fin.precision(8);
    fout.precision(8);
    cout << fixed;
    fout << fixed;
    
    fin.open("aspirin_1.xyz");
    if (fin.fail())
        cout << "File failed to open." << endl;
    
    fin >> atom_num_0;
    Matrix3Xd coord_0(3, atom_num_0);
    string atom_type_0[max_atom_num];
    
    // coordinate stored in column, 3*d matrix
    // read in the reference coordinate
    
    for (i = 0; i < atom_num_0; i++) {
        fin >> atom_type_0[i];
        for (j = 0; j < 3; j++) {
            fin >> coord_0(j, i);
            }
    }
    fin.close();
    
    fin.open("aspirin_6.xyz");
    if (fin.fail())
        cout << "File failed to open." << endl;
    
    fin >> atom_num_1;
    Matrix3Xd coord_1(3, atom_num_1);
    string atom_type_1[atom_num_1];
    
    // read in the working coordinate
    
    for (i = 0; i < atom_num_1; i++) {
        fin >> atom_type_1[i];
        for (j = 0; j < 3; j++) {
            fin >> coord_1(j, i);
        }
    }
    fin.close();
    
    // augment the size of atom_type of reference to working and fill with "None"
    
    for (i = atom_num_0; i < atom_num_1; i++) {
        atom_type_0[i] = "None";
    }
    
    // print out original coordinates
    
//    cout << "the origianl reference coordinate: " << endl << endl;
//
//    for (i = 0; i < atom_num_0; i++) {
//        cout << atom_type_0[i] << "\t";
//        for (j = 0; j < 3; j++) {
//            cout << coord_0(j, i) << "\t\t";
//        }
//        cout << endl;
//    }
//    cout << endl;
//
//    cout << "the origianl working coordinate: " << endl << endl;
//
//    for (i = 0; i < atom_num_1; i++) {
//        cout << atom_type_1[i] << "\t";
//        for (j = 0; j < 3; j++) {
//            cout << coord_1(j, i) << "\t\t";
//        }
//        cout << endl;
//    }
//    cout << endl;
    
    
    // step2: calculate the centroids and translate to origin
    
    Vector3d centroid_0 = Vector3d::Zero(), centroid_1 = Vector3d::Zero();
    
    for (i = 0; i < 3; i++) {
        double sum_0 = 0;
        for (j = 0; j < atom_num_0; j++) {
            sum_0 = sum_0 + coord_0(i, j);
        }
        centroid_0(i) = sum_0 / atom_num_0;
    }
    
    for (i = 0; i < 3; i++) {
        double sum_1 = 0;
        for (j = 0; j < atom_num_1; j++) {
            sum_1 = sum_1 + coord_1(i, j);
        }
        centroid_1(i) = sum_1 / atom_num_1;
    }
    
    //move to origin
    
    for (i = 0; i < 3; i++) {
        for (j = 0; j < atom_num_0; j++) {
            coord_0(i, j) -= centroid_0(i);
        }
        for (j = 0; j < atom_num_1; j++) {
            coord_1(i, j) -= centroid_1(i);
        }
    }
    
    
    // step3: use the descriptor information to construct the character matrix rel_dis
    
    
    int element_type_num, total_atom, total_struc, element_type_temp, element_type_num_0, element_type_num_1, int_temp, atom_num_temp;
    double struc_energy_0, struc_energy_1;
    string title, scale_symbol, scale_factor, shift_factor, element_type[100], struc_eneygy[100];
    string file_name_0, file_name_1, temp[3], element_type_0[100], subs_energy[100], element_type_1[100];
    MatrixXd rel_dis_0 = MatrixXd::Zero(atom_num_0, descriptor_num), rel_dis_1 = MatrixXd::Zero(atom_num_1, descriptor_num);
        
        
    fin.open("aenet_aspirin.txt");
    if (fin.fail())
        cout << "File failed to open." << endl;
    
    
    // read in all the irrelevant information
    
    getline(fin, title);
    fin >> scale_symbol >> scale_factor >> shift_factor >> element_type_num;
//    cout << title << endl << scale_symbol << endl << scale_factor << endl << shift_factor << endl << element_type_num << endl;
    for (i = 0; i < element_type_num; i++) fin >> element_type[i];
//    for (i = 0; i < element_type_num; i++) cout << element_type[i] << endl;
    for (i = 0; i < element_type_num; i++) fin >> subs_energy[i];
    fin >> total_atom >> total_struc;
    for (i = 0; i < 3; i++) fin >> struc_eneygy[i];
        
        
    // read in the descriptors and save into rel_dis matrix
    
    fin >> file_name_0;
//    cout << file_name_1 << endl;
    fin >> atom_num_0 >> element_type_num_0 >> struc_energy_0;
//    cout << atom_num_1 << endl << element_type_num_1 << endl << struc_energy_1 << endl;
    for (i = 0; i < atom_num_0; i++) {
        fin >> element_type_temp;
        element_type_0[i] = element_type[element_type_temp];
        
        for (j = 0; j < 3; j++) fin >> temp[j]; // coordinate
        for (j = 0; j < 3; j++) fin >> temp[j]; // force
        
        fin >> int_temp;
        for (j = 0; j < descriptor_num; j++) {
            fin >> rel_dis_0(i, j);
        }
    }
      
    for (k = 0; k < 5; k++) {
        fin >> file_name_1;
        fin >> atom_num_temp >> element_type_num_1 >> struc_energy_1;
        for (i = 0; i < atom_num_temp; i++) {
            fin >> element_type_temp;
            element_type_1[i] = element_type[element_type_temp];
            
            for (j = 0; j < 3; j++) fin >> temp[j]; // coordinate
            for (j = 0; j < 3; j++) fin >> temp[j]; // force
                
            fin >> int_temp;
            for (j = 0; j < descriptor_num; j++) {
                fin >> rel_dis_1(i, j);
            }
        }
    }
        
    fin.close();
    
    
    // sort the rel_dis bzw. descriptor

//    for (i = 0; i < atom_num_0; i++) {
//        for (j = 0; j < desc_num; j++) {
//            for (k = j + 1; k < desc_num; k++) {
//                if (rel_dis_0(i,j) > rel_dis_0(i,k))
//                    swap(rel_dis_0(i,j), rel_dis_0(i,k));
//            }
//        }
//    }
//
//    cout << rel_dis_0;
//
//
//    for (i = 0; i < atom_num_1; i++) {
//        for (j = 0; j < desc_num; j++) {
//            for (k = j + 1; k < desc_num; k++) {
//                if (rel_dis_1(i,j) > rel_dis_1(i,k))
//                    swap(rel_dis_1(i,j), rel_dis_1(i,k));
//            }
//        }
//    }
    
    // compare the relative distances and switch the atom order in working coordinate
    
    for (i = 0; i < atom_num_0; i++) {
            
        double min_dev = 100000;
        double dev_sum = 0;
            
        for (j = i; j < atom_num_1; j++) {
            dev_sum = 0;
            
            //include element type comparison
            
//            if (atom_type_0[i] == atom_type_1[j]) {
                
            for (k = 0; k < descriptor_num; k++) {
                dev_sum = dev_sum + abs(rel_dis_0(i,k) - rel_dis_1(j,k));
            }
                            
//            cout << i << " " << j << " " << dev_sum << " " << min_dev << endl;
                                
            if (dev_sum < min_dev) {
                            
                for (k = 0; k < descriptor_num; k++)
                    swap(rel_dis_1(i,k), rel_dis_1(j,k));
                            
                for (k = 0; k < 3; k++)
                    swap(coord_1(k,i), coord_1(k,j));
                            
                string temp = atom_type_1[i];
                atom_type_1[i] = atom_type_1[j];
                atom_type_1[j] = temp;
                            
                min_dev = dev_sum;
            }
//            }
//            cout << min_dev << endl; 4.69625160  4.44105390
        }
    }
    
    // construct reference and working coord with atom_num_0 atoms to apply Kabsch Algorithm
    
    MatrixXd ref_coord(3, atom_num_0), work_coord(3, atom_num_0);
    
    for (i = 0; i < atom_num_0; i++) {
        for (j = 0; j < 3; j++) {
            ref_coord(j,i) = coord_0(j,i);
            work_coord(j,i) = coord_1(j,i);
        }
    }
    
    // step4: apply Kabsch Algorithm
    // 4-1: compute RMSD(coord_0, coord_1)
    
    double RMSD_before = 0;
    
    for (int i = 0; i < atom_num_0; i++) {
        for (int j = 0; j < 3; j++) {
            RMSD_before += pow(coord_0(j, i)-coord_1(j, i), 2);
        }
    }
    
    RMSD_before = sqrt(RMSD_before / atom_num_0);
    
    cout << "RMSD before rotation: " << RMSD_before << endl << endl;
    
    // 4-2: SVD
    MatrixXd CovMatrix = work_coord * ref_coord.transpose();
    JacobiSVD<MatrixXd> SVD(CovMatrix, ComputeThinU | ComputeThinV);
    
    // 4-3: find the rotation matrix
    double d = (SVD.matrixV() * SVD.matrixU().transpose()).determinant();
    if (d > 0)
        d = 1.0;
    else
        d = -1.0;
    Matrix3d I = Matrix3d::Identity(3, 3);
    I(2, 2) = d;
    Matrix3d RotMatrix = SVD.matrixV() * I * SVD.matrixU().transpose();
//    cout << "Rotation matrix: " << endl << RotMatrix << endl;
    
//    cout << (RotMatrix * coord_1).transpose() << endl;
    
    // 4-4: rotate the 2nd molecule and calculate the RMSD again
    
    Matrix3Xd coord_2(3, atom_num_1);
    coord_2 = RotMatrix * coord_1;
    
//    cout << coord_0.transpose() << endl << endl;
//    cout << coord_2.transpose() << endl << endl;
    
    
    // move the reference coordinate back to original centroid_0, move working coordinate also to centroid_0
    
    for (i = 0; i < 3; i++) {
        for (j = 0; j < atom_num_0; j++) {
            coord_0(i, j) += centroid_0(i);
        }
        for (j = 0; j < atom_num_1; j++) {
            coord_2(i, j) += centroid_0(i);
        }
    }
    
    
    cout << "the original reference coordinate:" << endl << endl;
    
    for (i = 0; i < atom_num_0; i++) {
        cout << atom_type_0[i] << "\t";
        for (j = 0; j < 3; j++) {
            cout << coord_0(j, i) << "\t\t";
        }
        cout << endl;
    }
    cout << endl;
    
    cout << "the working coordinate with centroid at centroid_0 after rotation:" << endl << endl;
    
    for (i = 0; i < atom_num_1; i++) {
        cout << atom_type_1[i] << "\t";
        for (j = 0; j < 3; j++) {
            cout << coord_2(j, i) << "\t\t";
        }
        cout << endl;
    }
    cout << endl;
    
    // write the working coordinate into a file
    
    fout.open("work.xyz");
    fout << atom_num_1 << endl << endl;
    for (i = 0; i < atom_num_1; i++) {
        fout << atom_type_1[i] << "\t";
        for (j = 0; j < 3; j++) {
            fout << coord_2(j, i) << "\t\t";
        }
        fout << endl;
    }
    fout.close();
    
    // calculate RMSD after superimpose
    
    double RMSD_after = 0;
    
    for (int i = 0; i < atom_num_0; i++) {
        for (int j = 0; j < 3; j++) {
            RMSD_after += pow(coord_0(j, i)-coord_2(j, i), 2);
        }
    }
    
    RMSD_after = sqrt(RMSD_after / atom_num_0);
    
    cout << "RMSD after rotation: " << RMSD_after << endl << endl;
    

    return 0;
}
